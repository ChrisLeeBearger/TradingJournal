@page "/accountsBackup/{Page:int?}"
@inject ITradingAccountService TradingAccountService
@attribute [Authorize]

<h1>Trading Accounts</h1>

@if (TradingAccountService.List is not null)
{
    <br />

    <div class="row justify-content-start">
        <div class="col-6">
            <table class="table table-bordered table-striped">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Status</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (TradingAccount account in TradingAccountService.List.Items)
                    {
                        <tr style="">
                            <td>@account.Name</td>
                            <td>@account.Status</td>
                            <td class="w-25">
                                <button class="btn btn-primary w-100" @onclick="() => EditAccount(account)">Edit</button>
                            </td>
                            <td class="w-25">
                                <button class="btn btn-warning w-100" @onclick="() => DisableAccount(account)">Disable</button>
                            </td>
                            <td class="w-25">
                                <button type="button" class="btn btn-danger w-100" @onclick="() => DeleteAccount(account)">Delete</button>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>

            <div class="d-flex">
                <div>
                    <Pagination TItem=TradingAccount
                            List=TradingAccountService.List
                            PaginationCallback="LoadPage">
                    </Pagination>
                </div>
                <div class="ms-auto">
                    <a href="/trading account/add" type="button" class="btn btn-primary">Add</a>
                </div>
            </div>

        </div>
    </div>

}
else
{
    <span>Loading Trading Accounts...</span>
}

@if (_deleteDialogOpen)
{
    <ModalDialog Title="Are you sure?" Text="@_modaltext" OnClose="OnDeleteDialogClose"></ModalDialog>
}

@code {
    private bool _deleteDialogOpen = false;
    private TradingAccount selectedAccount;
    private string _modaltext;

    [Parameter]
    public int Page { get; set; }

    private async void OnDeleteDialogClose(bool accepted)
    {
        _deleteDialogOpen = false;
        if (accepted)
        {
            await TradingAccountService.DeleteTradingAccount(selectedAccount.Id);
            await TradingAccountService.LoadTradingAccounts(TradingAccountService.List.SelectedPage);
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await TradingAccountService.LoadTradingAccounts(Page == 0 ? 1 : Page);
        StateHasChanged();
    }

    private async Task LoadPage(bool next)
    {
        int currentPage = TradingAccountService.List.SelectedPage;
        int destPage = next ? ++currentPage : --currentPage;
        await TradingAccountService.LoadTradingAccounts(destPage);
        StateHasChanged();
    }

    private void EditAccount(TradingAccount account)
    {

    }

    private void DisableAccount(TradingAccount account)
    {

    }

    private void DeleteAccount(TradingAccount account)
    {
        selectedAccount = account;
        _modaltext = $"Do you want to delete trading account '{account.Name}'?";
        _deleteDialogOpen = true;
    }
    }
