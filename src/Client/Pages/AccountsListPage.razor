@page "/accounts"

@inject ITradingAccountService TradingAccountService
@inject IDialogService DialogService

@attribute [Authorize]

<PageTitle>Accounts</PageTitle>

<MudText Typo="Typo.h4">Accounts</MudText>

<MudContainer Class="mt-8 px-4" MaxWidth="MaxWidth.False">
    <MudGrid>

        <MudItem xs="12" lg="6" xl="4">
            <MudTable ServerData="@(new Func<TableState, Task<TableData<TradingAccount>>>(ServerReload))"
                      LoadingProgressColor="Theme.GetLoadingProgressColor()" MultiSelection="true"
                      SelectedItemsChanged="SelectionChanged" T="TradingAccount"
                      @ref="_table">

                <ToolBarContent>
                    <MudText Typo="Typo.subtitle2">Listing of ByBit API accounts</MudText>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<TradingAccount, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="((TradingAccount x) => x.Status)">Status</MudTableSortLabel></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Name"><MudText Color="Theme.GetAccountStatusColor(context.Status)">@context.Status</MudText></MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager DisableRowsPerPage="true" HorizontalAlignment="HorizontalAlignment.Right" />
                </PagerContent>
            </MudTable>

            <MudItem xs="12" Class="mt-6">
                <MudButtonGroup OverrideStyles="false">

                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               OnClick="OpenAddAccountDialog">Add</MudButton>

                    <MudButton Variant="Variant.Outlined" Color="Color.Success"
                               Disabled="@_areAccountsSelected" OnClick="@(() => OnStatusChangeButtonClick(TradingAccountStatus.Enabled))">Enable</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning"
                               Disabled="@_areAccountsSelected" OnClick="@(() => OnStatusChangeButtonClick(TradingAccountStatus.Disabled))">Disable</MudButton>

                    <MudButton Variant="Variant.Outlined" Color="Color.Error"
                               Disabled="@_areAccountsSelected" OnClick="OpenDeleteDialog">Delete</MudButton>

                </MudButtonGroup>
            </MudItem>
        </MudItem>

        <AddAccountInstructions/>

    </MudGrid>
</MudContainer>

@if (_debugSelection)
{
    <MudItem xs="12" sm="8" lg="6" xl="4" Class="mb-6">
        <MudText Inline="true">Selected items: @(_table.SelectedItems==null ? "" : string.Join(", ", _table.SelectedItems.OrderBy(x=>x.Name).Select(x=>x.Name)))</MudText>
    </MudItem>
}

@code {

    // enables a text field at the bottom showing the selected account names
    private bool _debugSelection = false;

    private bool _areAccountsSelected = true;

    private MudTable<TradingAccount> _table;
    private HashSet<TradingAccount> _selectedItems;

    private void SelectionChanged(HashSet<TradingAccount> selectedAccounts)
    {
        _areAccountsSelected = selectedAccounts is null || selectedAccounts.Count == 0;
    }

    private async Task OpenAddAccountDialog()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var dialogResult = await DialogService.Show<AddAccountDialog>("Add an Account", options).Result;

        // if account was added successfully reload the table
        if(dialogResult.Cancelled is false)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task<TableData<TradingAccount>> ServerReload(TableState state)
    {
        // clear selection
        _selectedItems = new();

        // mudblazor pagination starts at 0 while backend starts at 1
        await TradingAccountService.LoadTradingAccounts(state.Page + 1);

        return new TableData<TradingAccount>()
            {
                TotalItems = TradingAccountService.List.TotalCount,
                Items = TradingAccountService.List.Items
            };
    }

    private async Task OnStatusChangeButtonClick(TradingAccountStatus status)
    {
        foreach (var account in _table.SelectedItems)
        {
            await TradingAccountService.SetStatus(account.Id, status);
        }
        await _table.ReloadServerData();
    }

    private async Task OpenDeleteDialog()
    {
        // instantiate a modal dialog to ask the user for confirmation
        var parameters = new DialogParameters();
        parameters.Add(nameof(ModalDialog.Text), $"Do you really want to delete the {_table.SelectedItems.Count} selected accounts?");
        parameters.Add(nameof(ModalDialog.ButtonText), "Delete");
        parameters.Add(nameof(ModalDialog.ButtonColor), Color.Error);
        parameters.Add(nameof(ModalDialog.SwitchRequired), true);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialogResult = await DialogService.Show<ModalDialog>("Delete", parameters, options).Result;

        // if OK button has been clicked on the modal perform deletion and reload the current page
        if (dialogResult.Cancelled is false)
        {
            foreach (var account in _table.SelectedItems)
            {
                await TradingAccountService.DeleteTradingAccount(account.Id);
            }
            await _table.ReloadServerData();
        }
    }
}
