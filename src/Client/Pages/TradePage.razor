@page "/trades/{Id:int}"

@using Application.CQS.Trades.Commands;

@inject ITradeService TradeService
@inject IDialogService DialogService

@attribute [Authorize]

<PageTitle>TJ - Trade </PageTitle>

<MudGrid>

    <MudItem sm="12" lg="12" xl="8">

        <MudText Typo="Typo.h4" Class="mb-6">@_trade.Symbol.Name @_trade.Side</MudText>

        <MudTable Items="_trades" Loading="@_loading" LoadingProgressColor="Color.Info" @ref="_table">

            <HeaderContent>
                <MudTh>Status</MudTh>
                <MudTh>Side</MudTh>
                <MudTh>Symbol</MudTh>
                <MudTh>Average Entry</MudTh>
                <MudTh>Average Exit</MudTh>
                <MudTh>Size</MudTh>
                <MudTh>Return</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Status"><MudText Color="GetStatusColor(context.Status)">@context.Status</MudText></MudTd>
                <MudTd DataLabel="Side">@context.Side</MudTd>
                <MudTd DataLabel="Symbol">@context.Symbol.Name</MudTd>
                <MudTd DataLabel="Entry">@context.AverageEntryPrice</MudTd>
                <MudTd DataLabel="Exit">@(context.Status != TradeStatus.Open ? context.AverageExitPrice : "")</MudTd>
                <MudTd DataLabel="Size">@context.Size</MudTd>
                <MudTd DataLabel="Return"><MudText Color="GetReturnColor(context.Return)">@context.Return</MudText></MudTd>
            </RowTemplate>

        </MudTable>
    </MudItem>

    <MudItem sm="12" lg="12" xl="8">

        <MudText Typo="Typo.h4" Class="mb-6">Executions</MudText>

        <MudTable Items="_executions" Loading="@_loading" LoadingProgressColor="Color.Info">

            <HeaderContent>
                <MudTh>Direction</MudTh>
                <MudTh>Size</MudTh>
                <MudTh>Position</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Value</MudTh>
                <MudTh>Fee</MudTh>
                <MudTh>Return</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Direction"><MudText Color="GetDirectionColor(context.Direction)">@context.Direction</MudText></MudTd>
                <MudTd DataLabel="Size">@context.Size</MudTd>
                <MudTd DataLabel="Position">@context.Position</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd DataLabel="Exit">@context.Value</MudTd>
                <MudTd DataLabel="Size">@context.Fee</MudTd>
                <MudTd DataLabel="Return"><MudText Color="GetReturnColor(context.Return)">@context.Return</MudText></MudTd>
            </RowTemplate>

        </MudTable>
    </MudItem>

    <MudItem xs="12">
        <MudText Typo="Typo.h4">Journal</MudText>
    </MudItem>

    <MudItem xs="12" lg="8">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
            <MudTextField @bind-Text="@_trade.Notes" Label="Notes" T="string" Variant="Variant.Outlined" Lines="6" />
        </MudPaper>
    </MudItem>

    <MudItem xs="12" lg="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
            <MudGrid>
                <MudItem xs="10">
                    <MudNumericField @bind-Value="_trade.Confluences" Label="Confluences" Variant="Variant.Text" Min="0" Max="99" />
                </MudItem>
                <MudItem xs="2">
                    <MudTooltip Text="Delete">
                        <MudIconButton Icon="@Icons.Material.Outlined.QuestionMark" Size="Size.Small" Style=""/>
                    </MudTooltip>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        @if (_saveInProgress)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        }
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnSaveButtonClick">Save</MudButton>
    </MudItem>

</MudGrid>


@code {

    private bool _loading;
    private bool _saveInProgress = false;

    private MudTable<Trade> _table;
    private Trade _trade;
    private HashSet<Trade> _trades;
    private List<Execution> _executions;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _trade = await TradeService.GetTrade(Id);
        _trades = new() { _trade };
        _executions = _trade.Executions;

        await base.OnInitializedAsync();
    }

    private Color GetStatusColor(TradeStatus result)
    {
        return result switch
        {
            TradeStatus.Open => Color.Warning,
            TradeStatus.Breakeven => Color.Default,
            TradeStatus.Win => Color.Success,
            TradeStatus.Loss => Color.Error,
            _ => Color.Default
        };
    }

    private Color GetDirectionColor(TradeDirection direction)
    {
        return direction switch
        {
            TradeDirection.Open => Color.Success,
            TradeDirection.Close => Color.Error,
        };
    }

    private Color GetReturnColor(decimal amount)
    {
        return amount switch
        {
            0 => Color.Default,
            > 0 => Color.Success,
            < 0 => Color.Error,
        };
    }

    private async Task OnSaveButtonClick()
    {
        _saveInProgress = true;

        await TradeService.UpdateJournalFields(new UpdateJournalingFieldsCommand
            {
                TradeId = _trade.Id,
                Notes = _trade.Notes,
                Confluences = _trade.Confluences,
            });

        await Task.Delay(600);

        _saveInProgress = false;
    }
}

