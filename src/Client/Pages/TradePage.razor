@page "/trades/{Id:int}"

@using TradingJournal.Application.Entities.Trades.Commands.UpdateJournalingFields

@inject ITradeService TradeService
@inject IDialogService DialogService

@attribute [Authorize]

<PageTitle>@_title</PageTitle>

<MudText Typo="Typo.h4">@_title</MudText>

<MudContainer Class="mt-8 px-4" MaxWidth="MaxWidth.False">
    <MudGrid>

        @if (_trade == null)
        {

            <MudText>Loading Trade...</MudText>
        }
        else
        {

            <MudItem xs="12">

                <MudTable Items="_trades" LoadingProgressColor="Color.Info">

                    <HeaderContent>
                        <MudTh>Status</MudTh>
                        <MudTh>Side</MudTh>
                        <MudTh>Symbol</MudTh>
                        <MudTh>Account</MudTh>
                        <MudTh>Opened</MudTh>
                        <MudTh>Closed</MudTh>
                        <MudTh>Average Entry</MudTh>
                        <MudTh>Average Exit</MudTh>
                        <MudTh>Size</MudTh>
                        <MudTh>Return</MudTh>
                        <MudTh>Net Return</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd DataLabel="Status"><MudText Color="Theme.GetTradeStatusColor(context.Status)">@context.Status</MudText></MudTd>
                        <MudTd DataLabel="Side">@context.Side</MudTd>
                        <MudTd DataLabel="Symbol">@context.Symbol.Name</MudTd>
                        <MudTd DataLabel="Account">@context.TradingAccount.Name</MudTd>
                        <MudTd DataLabel="Opened">@context.OpenedAt</MudTd>
                        <MudTd DataLabel="Closed">@($"{(context.Status == TradeStatus.Open ? "" : context.ClosedAt )}")</MudTd>
                        <MudTd DataLabel="Entry">@context.AverageEntryPrice</MudTd>
                        <MudTd DataLabel="Exit">@(context.Status != TradeStatus.Open ? context.AverageExitPrice : "")</MudTd>
                        <MudTd DataLabel="Size">@context.Size</MudTd>
                        <MudTd DataLabel="Return"><MudText Color="Theme.GetReturnColor(context.Return)">@context.Return</MudText></MudTd>
                        <MudTd DataLabel="Net Return"><MudText Color="Theme.GetReturnColor(context.NetReturn)">@context.NetReturn</MudText></MudTd>
                    </RowTemplate>

                </MudTable>
            </MudItem>

            <MudItem xs="12">

                <MudText Typo="Typo.h4" Class="mb-6">Executions</MudText>

                <MudTable Items="_executions" LoadingProgressColor="Color.Info">

                    <HeaderContent>
                        <MudTh>Direction</MudTh>
                        <MudTh>Size</MudTh>
                        <MudTh>Position</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Value</MudTh>
                        <MudTh>Fee</MudTh>
                        <MudTh>Return</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd DataLabel="Direction"><MudText Color="Theme.GetTradeDirectionColor(context.Direction)">@context.Direction</MudText></MudTd>
                        <MudTd DataLabel="Size">@context.Size</MudTd>
                        <MudTd DataLabel="Position">@context.Position</MudTd>
                        <MudTd DataLabel="Price">@context.Price</MudTd>
                        <MudTd DataLabel="Exit">@context.Value</MudTd>
                        <MudTd DataLabel="Size">@context.Fee</MudTd>
                        <MudTd DataLabel="Return"><MudText Color="Theme.GetReturnColor(context.Return)">@context.Return</MudText></MudTd>
                    </RowTemplate>

                </MudTable>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h4">Journal</MudText>
            </MudItem>

            <MudItem xs="12" md="8">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                    <MudTextField @bind-Text="@_trade.Notes" Label="Notes" T="string" Variant="Variant.Outlined" Lines="6" />
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                    <MudGrid>
                        <MudItem xs="10">
                            <MudNumericField @bind-Value="_trade.Confluences" Label="Confluences" Variant="Variant.Text" Min="0" Max="99" />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                @if (_saveInProgress)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnSaveButtonClick">Save</MudButton>
            </MudItem>
        }

    </MudGrid>
</MudContainer>

@code {

    private bool _saveInProgress = false;

    private string _title;

    private Trade _trade;
    private HashSet<Trade> _trades;
    private List<Execution> _executions;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _trade = await TradeService.GetTrade(Id);
        _trades = new() { _trade };
        _executions = _trade.Executions;
        _title = $"{_trade.Side} - {_trade.Symbol.Name}";

        await base.OnInitializedAsync();
    }

    private async Task OnSaveButtonClick()
    {
        _saveInProgress = true;

        await TradeService.UpdateJournalFields(new UpdateJournalingFieldsCommand
            {
                TradeId = _trade.Id,
                Notes = _trade.Notes,
                Confluences = _trade.Confluences,
            });

        await Task.Delay(600);

        _saveInProgress = false;
    }
}