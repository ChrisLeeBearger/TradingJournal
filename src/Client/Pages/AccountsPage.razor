@page "/accounts"

@inject ITradingAccountService TradingAccountService
@inject IDialogService DialogService

@attribute [Authorize]

<PageTitle>TJ - Accounts</PageTitle>

<MudGrid>

    <MudItem xs="12" sm="8" lg="6" xl="4">
        <MudText Typo="Typo.h4" Class="mb-6">Accounts</MudText>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<TradingAccount>>>(ServerReload))"
                  Loading="@_loading" LoadingProgressColor="Color.Info" MultiSelection="true"
                  SelectedItemsChanged="SelectionChanged" T="TradingAccount"
                  Hover="true" @ref="_table">

            <ToolBarContent>
                <MudText Typo="Typo.subtitle2">Listing of ByBit API accounts</MudText>
            </ToolBarContent>

            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<TradingAccount, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="((TradingAccount x) => x.Status)">Status</MudTableSortLabel></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Name">@context.Status</MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager DisableRowsPerPage="true" HorizontalAlignment="HorizontalAlignment.Right" />
            </PagerContent>
        </MudTable>
    </MudItem>

    <MudItem xs="12" Class="mb-6">
        <MudButtonGroup OverrideStyles="false">

            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="OpenAddAccountDialog">Add</MudButton>

            <MudButton Variant="Variant.Outlined" Color="Color.Success"
                       Disabled="@_areAccountsSelected" OnClick="@(() => OnStatusChangeButtonClick(TradingAccountStatus.Enabled))">Enable</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Warning"
                       Disabled="@_areAccountsSelected" OnClick="@(() => OnStatusChangeButtonClick(TradingAccountStatus.Disabled))">Disable</MudButton>

            <MudButton Variant="Variant.Outlined" Color="Color.Error"
                       Disabled="@_areAccountsSelected" OnClick="OpenDeleteDialog">Delete</MudButton>

        </MudButtonGroup>

    </MudItem>

</MudGrid>

@if (_debugSelection)
{
    <MudItem xs="12" sm="8" lg="6" xl="4" Class="mb-6">
        <MudText Inline="true">Selected items: @(_table.SelectedItems==null ? "" : string.Join(", ", _table.SelectedItems.OrderBy(x=>x.Name).Select(x=>x.Name)))</MudText>
    </MudItem>
}

@code {

    // enables a text field at the bottom showing the selected account names
    private bool _debugSelection = false;

    private bool _areAccountsSelected = true;
    private bool _loading;

    private MudTable<TradingAccount> _table;

    private void SelectionChanged(HashSet<TradingAccount> selectedAccounts)
    {
        _areAccountsSelected = selectedAccounts is null || selectedAccounts.Count == 0;
    }

    private async Task OpenAddAccountDialog()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        DialogService.Show<AddAccountDialog>("Add an Account", options);
    }

    private async Task<TableData<TradingAccount>> ServerReload(TableState state)
    {
        // clear selection
        _table.SelectedItems = null;

        // mudblazor pagination starts at 0 while backend starts at 1
        await TradingAccountService.LoadTradingAccounts(state.Page + 1);

        return new TableData<TradingAccount>()
            {
                TotalItems = TradingAccountService.List.TotalCount,
                Items = TradingAccountService.List.Items
            };
    }

    private async Task OnStatusChangeButtonClick(TradingAccountStatus status)
    {
        foreach (var account in _table.SelectedItems)
        {
            await TradingAccountService.SetStatus(account.Id, status);
        }
        await _table.ReloadServerData();
    }

    private async Task OpenDeleteDialog()
    {
        // instantiate a modal dialog to ask the user for confirmation
        var parameters = new DialogParameters();
        parameters.Add(nameof(ModalDialog.Text), $"Do you really want to delete the {_table.SelectedItems.Count} selected accounts?");
        parameters.Add(nameof(ModalDialog.ButtonText), "Delete");
        parameters.Add(nameof(ModalDialog.ButtonColor), Color.Error);
        parameters.Add(nameof(ModalDialog.SwitchRequired), true);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialogResult = await DialogService.Show<ModalDialog>("Delete", parameters, options).Result;

        // if OK button has been clicked on the modal perform deletion and reload the current page
        if (dialogResult.Cancelled is false)
        {
            foreach (var account in _table.SelectedItems)
            {
                await TradingAccountService.DeleteTradingAccount(account.Id);
            }
            await _table.ReloadServerData();
        }
    }
}
