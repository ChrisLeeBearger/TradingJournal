@inject ICustomAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3">Login</MudText>

<MudGrid>
    <MudItem xs="12" sm="6" lg="4" xl="4">

        <EditForm Model="_model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <MudTextField Label="Username"
                          Placeholder="JohnDoe@example.com"
                          For="@(() => _model.Email)"
                          InputType="InputType.Email"
                          @bind-Value="_model.Email" />

            <MudTextField Label="Password"
                          For="@(() => _model.Password)"
                          InputType="@_passwordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordInputIcon"
                          @bind-Value="_model.Password"
                          OnAdornmentClick="TogglePasswordVisibility" />

            <div class="d-flex justify-end flex-grow-1 gap-4 mt-6">

                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" Color="Color.Error">@_bottomErrorField</MudText>
                </MudItem>

                <MudButtonGroup OverrideStyles="false">

                    <MudTooltip Text="Functionality under construction.">
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   Disabled="true"
                                   Class="ml-auto tj-ws-nowrap">Forgot Password</MudButton>
                    </MudTooltip>

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="ml-auto tj-ws-nowrap">Log In</MudButton>

                </MudButtonGroup>

            </div>

        </EditForm>

    </MudItem>
</MudGrid>

@code {

    private UserLogin _model = new();
    private string _bottomErrorField;

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (_passwordVisibility)
        {
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }

        _passwordVisibility = !_passwordVisibility;
    }

    private async Task HandleLogin()
    {
        var result = await AuthenticationService.Login(_model);

        if (result.Success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // TODO: show error message
            _bottomErrorField = result.Message;
        }
    }
}
