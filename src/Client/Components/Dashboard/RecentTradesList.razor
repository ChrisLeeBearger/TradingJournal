@inject ITradeService TradeService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<MudGrid>
    <MudItem xs="12" xl="12">
        <MudText Typo="Typo.h5">@Title</MudText>

        <MudTable Items="@_trades" T="Trade"
                  OnRowClick="RowClicked" Elevation="0"
                  Hover="true" RowStyle="cursor: pointer;">

            <HeaderContent>
                <MudTh>Status</MudTh>
                <MudTh>Side</MudTh>
                <MudTh>Symbol</MudTh>
                <MudTh>Size</MudTh>
                <MudTh>Return</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Status"><MudText Color="Theme.GetTradeStatusColor(context.Status)">@context.Status</MudText></MudTd>
                <MudTd DataLabel="Side">@context.Side</MudTd>
                <MudTd DataLabel="Symbol">@context.Symbol.Name</MudTd>
                <MudTd DataLabel="Size">@context.Size.ToFormatedString()</MudTd>
                <MudTd DataLabel="Return"><MudText Color="Theme.GetReturnColor(context.Return)">@context.Return.ToFormatedString()</MudText></MudTd>
            </RowTemplate>

        </MudTable>
    </MudItem>
</MudGrid>


@code {

    private List<Trade> _trades;

    [Parameter]
    public int MaxTrades { get; set; }

    [Parameter]
    public IEnumerable<TradeStatus> Statuses { get; set; }

    [Parameter]
    public string Title { get; set; } = "Trade History";

    protected override async Task OnInitializedAsync()
    {
        // load trades and assign them to binded field
        await TradeService.LoadTrades(1, MaxTrades, Statuses);
        _trades = TradeService.PaginatedList.Items;

        await base.OnInitializedAsync();
    }

    private void RowClicked(TableRowClickEventArgs<Trade> args)
    {
        NavigationManager.NavigateTo($"/trades/{args.Item.Id}");
    }
}

